
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004070  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800422c  0800422c  0001422c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800429c  0800429c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800429c  0800429c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042a4  080042a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042a4  080042a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042a8  080042a8  000142a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080042ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  2000000c  080042b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  080042b8  000205cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011222  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002514  00000000  00000000  000312a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  000337b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a8b  00000000  00000000  00034578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aaf6  00000000  00000000  00035003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108d2  00000000  00000000  0005faf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001043a5  00000000  00000000  000703cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038e4  00000000  00000000  00174770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00178054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004214 	.word	0x08004214

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004214 	.word	0x08004214

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fb47 	bl	8000b8e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f830 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f90c 	bl	8000720 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000508:	f000 f88e 	bl	8000628 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800050c:	f000 f8da 	bl	80006c4 <MX_USB_OTG_FS_PCD_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000516:	4812      	ldr	r0, [pc, #72]	; (8000560 <main+0x68>)
 8000518:	f000 fe4a 	bl	80011b0 <HAL_GPIO_WritePin>
	  HAL_Delay (500);
 800051c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000520:	f000 fbaa 	bl	8000c78 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800052a:	480d      	ldr	r0, [pc, #52]	; (8000560 <main+0x68>)
 800052c:	f000 fe40 	bl	80011b0 <HAL_GPIO_WritePin>
	  HAL_Delay (500);
 8000530:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000534:	f000 fba0 	bl	8000c78 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,LD2B7_Pin, GPIO_PIN_SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2180      	movs	r1, #128	; 0x80
 800053c:	4808      	ldr	r0, [pc, #32]	; (8000560 <main+0x68>)
 800053e:	f000 fe37 	bl	80011b0 <HAL_GPIO_WritePin>
	  HAL_Delay (500);
 8000542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000546:	f000 fb97 	bl	8000c78 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,LD2B7_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <main+0x68>)
 8000550:	f000 fe2e 	bl	80011b0 <HAL_GPIO_WritePin>
	  HAL_Delay (500);
 8000554:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000558:	f000 fb8e 	bl	8000c78 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800055c:	e7d8      	b.n	8000510 <main+0x18>
 800055e:	bf00      	nop
 8000560:	48000400 	.word	0x48000400

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b098      	sub	sp, #96	; 0x60
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	2248      	movs	r2, #72	; 0x48
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 fe22 	bl	80041bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
 8000582:	60da      	str	r2, [r3, #12]
 8000584:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000586:	2000      	movs	r0, #0
 8000588:	f000 ffa2 	bl	80014d0 <HAL_PWREx_ControlVoltageScaling>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000592:	f000 f971 	bl	8000878 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000596:	f000 ff6b 	bl	8001470 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800059a:	4b22      	ldr	r3, [pc, #136]	; (8000624 <SystemClock_Config+0xc0>)
 800059c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005a0:	4a20      	ldr	r2, [pc, #128]	; (8000624 <SystemClock_Config+0xc0>)
 80005a2:	f023 0318 	bic.w	r3, r3, #24
 80005a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005aa:	2314      	movs	r3, #20
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ae:	2301      	movs	r3, #1
 80005b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b2:	2301      	movs	r3, #1
 80005b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005ba:	2360      	movs	r3, #96	; 0x60
 80005bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005c2:	2301      	movs	r3, #1
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 60;
 80005ca:	233c      	movs	r3, #60	; 0x3c
 80005cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 f83a 	bl	8001658 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80005ea:	f000 f945 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2303      	movs	r3, #3
 80005f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2105      	movs	r1, #5
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fca1 	bl	8001f50 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000614:	f000 f930 	bl	8000878 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000618:	f002 fac4 	bl	8002ba4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800061c:	bf00      	nop
 800061e:	3760      	adds	r7, #96	; 0x60
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000

08000628 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 800062e:	4a23      	ldr	r2, [pc, #140]	; (80006bc <MX_LPUART1_UART_Init+0x94>)
 8000630:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 8000634:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <MX_LPUART1_UART_Init+0x98>)
 8000636:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 800063a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800063e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 800065a:	2200      	movs	r2, #0
 800065c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800065e:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 8000660:	2200      	movs	r2, #0
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000664:	4b14      	ldr	r3, [pc, #80]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 8000666:	2200      	movs	r2, #0
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800066a:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 800066c:	2200      	movs	r2, #0
 800066e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000670:	4811      	ldr	r0, [pc, #68]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 8000672:	f002 fc8f 	bl	8002f94 <HAL_UART_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800067c:	f000 f8fc 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000680:	2100      	movs	r1, #0
 8000682:	480d      	ldr	r0, [pc, #52]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 8000684:	f003 fa24 	bl	8003ad0 <HAL_UARTEx_SetTxFifoThreshold>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800068e:	f000 f8f3 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000692:	2100      	movs	r1, #0
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 8000696:	f003 fa59 	bl	8003b4c <HAL_UARTEx_SetRxFifoThreshold>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006a0:	f000 f8ea 	bl	8000878 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_LPUART1_UART_Init+0x90>)
 80006a6:	f003 f9da 	bl	8003a5e <HAL_UARTEx_DisableFifoMode>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006b0:	f000 f8e2 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000028 	.word	0x20000028
 80006bc:	40008000 	.word	0x40008000
 80006c0:	00033324 	.word	0x00033324

080006c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d2:	2206      	movs	r2, #6
 80006d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d8:	2202      	movs	r2, #2
 80006da:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006de:	2202      	movs	r2, #2
 80006e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000702:	2201      	movs	r2, #1
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000708:	f000 fd6a 	bl	80011e0 <HAL_PCD_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000712:	f000 f8b1 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000bc 	.word	0x200000bc

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b4c      	ldr	r3, [pc, #304]	; (8000868 <MX_GPIO_Init+0x148>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a4b      	ldr	r2, [pc, #300]	; (8000868 <MX_GPIO_Init+0x148>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b49      	ldr	r3, [pc, #292]	; (8000868 <MX_GPIO_Init+0x148>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b46      	ldr	r3, [pc, #280]	; (8000868 <MX_GPIO_Init+0x148>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a45      	ldr	r2, [pc, #276]	; (8000868 <MX_GPIO_Init+0x148>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b43      	ldr	r3, [pc, #268]	; (8000868 <MX_GPIO_Init+0x148>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b40      	ldr	r3, [pc, #256]	; (8000868 <MX_GPIO_Init+0x148>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a3f      	ldr	r2, [pc, #252]	; (8000868 <MX_GPIO_Init+0x148>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <MX_GPIO_Init+0x148>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <MX_GPIO_Init+0x148>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a39      	ldr	r2, [pc, #228]	; (8000868 <MX_GPIO_Init+0x148>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b37      	ldr	r3, [pc, #220]	; (8000868 <MX_GPIO_Init+0x148>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000796:	4b34      	ldr	r3, [pc, #208]	; (8000868 <MX_GPIO_Init+0x148>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a33      	ldr	r2, [pc, #204]	; (8000868 <MX_GPIO_Init+0x148>)
 800079c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <MX_GPIO_Init+0x148>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80007ae:	f000 ff43 	bl	8001638 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2120      	movs	r1, #32
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f000 fcf9 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2B7_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007c4:	4829      	ldr	r0, [pc, #164]	; (800086c <MX_GPIO_Init+0x14c>)
 80007c6:	f000 fcf3 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2140      	movs	r1, #64	; 0x40
 80007ce:	4828      	ldr	r0, [pc, #160]	; (8000870 <MX_GPIO_Init+0x150>)
 80007d0:	f000 fcee 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	4822      	ldr	r0, [pc, #136]	; (8000874 <MX_GPIO_Init+0x154>)
 80007ec:	f000 fb4e 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f0:	2320      	movs	r3, #32
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f000 fb3f 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2B7_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2B7_Pin;
 800080e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <MX_GPIO_Init+0x14c>)
 8000828:	f000 fb30 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800082c:	2320      	movs	r3, #32
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4619      	mov	r1, r3
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <MX_GPIO_Init+0x150>)
 8000840:	f000 fb24 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000844:	2340      	movs	r3, #64	; 0x40
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4619      	mov	r1, r3
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_GPIO_Init+0x150>)
 800085c:	f000 fb16 	bl	8000e8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	; 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000
 800086c:	48000400 	.word	0x48000400
 8000870:	48001800 	.word	0x48001800
 8000874:	48000800 	.word	0x48000800

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_MspInit+0x44>)
 800088c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088e:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <HAL_MspInit+0x44>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6613      	str	r3, [r2, #96]	; 0x60
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_MspInit+0x44>)
 8000898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <HAL_MspInit+0x44>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <HAL_MspInit+0x44>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6593      	str	r3, [r2, #88]	; 0x58
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_MspInit+0x44>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b0b0      	sub	sp, #192	; 0xc0
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2298      	movs	r2, #152	; 0x98
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 fc65 	bl	80041bc <memset>
  if(huart->Instance==LPUART1)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a22      	ldr	r2, [pc, #136]	; (8000980 <HAL_UART_MspInit+0xb4>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d13d      	bne.n	8000978 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008fc:	2320      	movs	r3, #32
 80008fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000900:	2300      	movs	r3, #0
 8000902:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fddf 	bl	80024cc <HAL_RCCEx_PeriphCLKConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000914:	f7ff ffb0 	bl	8000878 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <HAL_UART_MspInit+0xb8>)
 800091a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800091c:	4a19      	ldr	r2, [pc, #100]	; (8000984 <HAL_UART_MspInit+0xb8>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <HAL_UART_MspInit+0xb8>)
 8000926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <HAL_UART_MspInit+0xb8>)
 8000932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000934:	4a13      	ldr	r2, [pc, #76]	; (8000984 <HAL_UART_MspInit+0xb8>)
 8000936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_UART_MspInit+0xb8>)
 800093e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000948:	f000 fe76 	bl	8001638 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800094c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000950:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000966:	2308      	movs	r3, #8
 8000968:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800096c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000970:	4619      	mov	r1, r3
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <HAL_UART_MspInit+0xbc>)
 8000974:	f000 fa8a 	bl	8000e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000978:	bf00      	nop
 800097a:	37c0      	adds	r7, #192	; 0xc0
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40008000 	.word	0x40008000
 8000984:	40021000 	.word	0x40021000
 8000988:	48001800 	.word	0x48001800

0800098c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b0b0      	sub	sp, #192	; 0xc0
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2298      	movs	r2, #152	; 0x98
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f003 fc05 	bl	80041bc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009ba:	d17c      	bne.n	8000ab6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80009bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80009c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80009c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80009d2:	2318      	movs	r3, #24
 80009d4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80009de:	2302      	movs	r3, #2
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80009e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 fd6d 	bl	80024cc <HAL_RCCEx_PeriphCLKConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80009f8:	f7ff ff3e 	bl	8000878 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <HAL_PCD_MspInit+0x134>)
 80009fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a00:	4a2f      	ldr	r2, [pc, #188]	; (8000ac0 <HAL_PCD_MspInit+0x134>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a08:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <HAL_PCD_MspInit+0x134>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a14:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a2e:	230a      	movs	r3, #10
 8000a30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f000 fa25 	bl	8000e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f000 fa14 	bl	8000e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <HAL_PCD_MspInit+0x134>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a68:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <HAL_PCD_MspInit+0x134>)
 8000a6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <HAL_PCD_MspInit+0x134>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_PCD_MspInit+0x134>)
 8000a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d114      	bne.n	8000ab2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a88:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_PCD_MspInit+0x134>)
 8000a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ac0 <HAL_PCD_MspInit+0x134>)
 8000a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a92:	6593      	str	r3, [r2, #88]	; 0x58
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_PCD_MspInit+0x134>)
 8000a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000aa0:	f000 fdba 	bl	8001618 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_PCD_MspInit+0x134>)
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa8:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <HAL_PCD_MspInit+0x134>)
 8000aaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000aae:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ab0:	e001      	b.n	8000ab6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8000ab2:	f000 fdb1 	bl	8001618 <HAL_PWREx_EnableVddUSB>
}
 8000ab6:	bf00      	nop
 8000ab8:	37c0      	adds	r7, #192	; 0xc0
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b10:	f000 f892 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	; (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b40:	f7ff ffea 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	; (8000b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <LoopForever+0xe>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	; (8000b88 <LoopForever+0x16>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f003 fb2f 	bl	80041cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b6e:	f7ff fcc3 	bl	80004f8 <main>

08000b72 <LoopForever>:

LoopForever:
    b LoopForever
 8000b72:	e7fe      	b.n	8000b72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b80:	080042ac 	.word	0x080042ac
  ldr r2, =_sbss
 8000b84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b88:	200005cc 	.word	0x200005cc

08000b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC1_2_IRQHandler>

08000b8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b94:	2300      	movs	r3, #0
 8000b96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f943 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 f80e 	bl	8000bc0 <HAL_InitTick>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d002      	beq.n	8000bb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	e001      	b.n	8000bb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb0:	f7ff fe68 	bl	8000884 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d023      	beq.n	8000c1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_InitTick+0x70>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_InitTick+0x6c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f941 	bl	8000e72 <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d10f      	bne.n	8000c16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b0f      	cmp	r3, #15
 8000bfa:	d809      	bhi.n	8000c10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f000 f919 	bl	8000e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_InitTick+0x74>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e007      	b.n	8000c20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	e004      	b.n	8000c20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	73fb      	strb	r3, [r7, #15]
 8000c1a:	e001      	b.n	8000c20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000000 	.word	0x20000000
 8000c34:	20000004 	.word	0x20000004

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	200005c8 	.word	0x200005c8

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200005c8 	.word	0x200005c8

08000c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c80:	f7ff ffee 	bl	8000c60 <HAL_GetTick>
 8000c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c90:	d005      	beq.n	8000c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_Delay+0x44>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c9e:	bf00      	nop
 8000ca0:	f7ff ffde 	bl	8000c60 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d8f7      	bhi.n	8000ca0 <HAL_Delay+0x28>
  {
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff47 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff5c 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff8e 	bl	8000d78 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5d 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffb0 	bl	8000de0 <SysTick_Config>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9a:	e166      	b.n	800116a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 8158 	beq.w	8001164 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d005      	beq.n	8000ecc <HAL_GPIO_Init+0x40>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0303 	and.w	r3, r3, #3
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d130      	bne.n	8000f2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	68da      	ldr	r2, [r3, #12]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f02:	2201      	movs	r2, #1
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	091b      	lsrs	r3, r3, #4
 8000f18:	f003 0201 	and.w	r2, r3, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d017      	beq.n	8000f6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d123      	bne.n	8000fbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	6939      	ldr	r1, [r7, #16]
 8000fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0203 	and.w	r2, r3, #3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 80b2 	beq.w	8001164 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001000:	4b61      	ldr	r3, [pc, #388]	; (8001188 <HAL_GPIO_Init+0x2fc>)
 8001002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001004:	4a60      	ldr	r2, [pc, #384]	; (8001188 <HAL_GPIO_Init+0x2fc>)
 8001006:	f043 0301 	orr.w	r3, r3, #1
 800100a:	6613      	str	r3, [r2, #96]	; 0x60
 800100c:	4b5e      	ldr	r3, [pc, #376]	; (8001188 <HAL_GPIO_Init+0x2fc>)
 800100e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001018:	4a5c      	ldr	r2, [pc, #368]	; (800118c <HAL_GPIO_Init+0x300>)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	089b      	lsrs	r3, r3, #2
 800101e:	3302      	adds	r3, #2
 8001020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001042:	d02b      	beq.n	800109c <HAL_GPIO_Init+0x210>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a52      	ldr	r2, [pc, #328]	; (8001190 <HAL_GPIO_Init+0x304>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d025      	beq.n	8001098 <HAL_GPIO_Init+0x20c>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a51      	ldr	r2, [pc, #324]	; (8001194 <HAL_GPIO_Init+0x308>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d01f      	beq.n	8001094 <HAL_GPIO_Init+0x208>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a50      	ldr	r2, [pc, #320]	; (8001198 <HAL_GPIO_Init+0x30c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d019      	beq.n	8001090 <HAL_GPIO_Init+0x204>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a4f      	ldr	r2, [pc, #316]	; (800119c <HAL_GPIO_Init+0x310>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d013      	beq.n	800108c <HAL_GPIO_Init+0x200>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a4e      	ldr	r2, [pc, #312]	; (80011a0 <HAL_GPIO_Init+0x314>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d00d      	beq.n	8001088 <HAL_GPIO_Init+0x1fc>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a4d      	ldr	r2, [pc, #308]	; (80011a4 <HAL_GPIO_Init+0x318>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d007      	beq.n	8001084 <HAL_GPIO_Init+0x1f8>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <HAL_GPIO_Init+0x31c>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d101      	bne.n	8001080 <HAL_GPIO_Init+0x1f4>
 800107c:	2307      	movs	r3, #7
 800107e:	e00e      	b.n	800109e <HAL_GPIO_Init+0x212>
 8001080:	2308      	movs	r3, #8
 8001082:	e00c      	b.n	800109e <HAL_GPIO_Init+0x212>
 8001084:	2306      	movs	r3, #6
 8001086:	e00a      	b.n	800109e <HAL_GPIO_Init+0x212>
 8001088:	2305      	movs	r3, #5
 800108a:	e008      	b.n	800109e <HAL_GPIO_Init+0x212>
 800108c:	2304      	movs	r3, #4
 800108e:	e006      	b.n	800109e <HAL_GPIO_Init+0x212>
 8001090:	2303      	movs	r3, #3
 8001092:	e004      	b.n	800109e <HAL_GPIO_Init+0x212>
 8001094:	2302      	movs	r3, #2
 8001096:	e002      	b.n	800109e <HAL_GPIO_Init+0x212>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <HAL_GPIO_Init+0x212>
 800109c:	2300      	movs	r3, #0
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	f002 0203 	and.w	r2, r2, #3
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	4093      	lsls	r3, r2
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010ae:	4937      	ldr	r1, [pc, #220]	; (800118c <HAL_GPIO_Init+0x300>)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010bc:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <HAL_GPIO_Init+0x320>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010e0:	4a32      	ldr	r2, [pc, #200]	; (80011ac <HAL_GPIO_Init+0x320>)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010e6:	4b31      	ldr	r3, [pc, #196]	; (80011ac <HAL_GPIO_Init+0x320>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800110a:	4a28      	ldr	r2, [pc, #160]	; (80011ac <HAL_GPIO_Init+0x320>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <HAL_GPIO_Init+0x320>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001134:	4a1d      	ldr	r2, [pc, #116]	; (80011ac <HAL_GPIO_Init+0x320>)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_GPIO_Init+0x320>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800115e:	4a13      	ldr	r2, [pc, #76]	; (80011ac <HAL_GPIO_Init+0x320>)
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	3301      	adds	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	fa22 f303 	lsr.w	r3, r2, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	f47f ae91 	bne.w	8000e9c <HAL_GPIO_Init+0x10>
  }
}
 800117a:	bf00      	nop
 800117c:	bf00      	nop
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	40021000 	.word	0x40021000
 800118c:	40010000 	.word	0x40010000
 8001190:	48000400 	.word	0x48000400
 8001194:	48000800 	.word	0x48000800
 8001198:	48000c00 	.word	0x48000c00
 800119c:	48001000 	.word	0x48001000
 80011a0:	48001400 	.word	0x48001400
 80011a4:	48001800 	.word	0x48001800
 80011a8:	48001c00 	.word	0x48001c00
 80011ac:	40010400 	.word	0x40010400

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e2:	b08f      	sub	sp, #60	; 0x3c
 80011e4:	af0a      	add	r7, sp, #40	; 0x28
 80011e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e116      	b.n	8001420 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d106      	bne.n	8001212 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fbbd 	bl	800098c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2203      	movs	r2, #3
 8001216:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f002 fd43 	bl	8003cbc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	687e      	ldr	r6, [r7, #4]
 800123e:	466d      	mov	r5, sp
 8001240:	f106 0410 	add.w	r4, r6, #16
 8001244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001250:	e885 0003 	stmia.w	r5, {r0, r1}
 8001254:	1d33      	adds	r3, r6, #4
 8001256:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001258:	6838      	ldr	r0, [r7, #0]
 800125a:	f002 fd03 	bl	8003c64 <USB_CoreInit>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2202      	movs	r2, #2
 8001268:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0d7      	b.n	8001420 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f002 fd31 	bl	8003cde <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127c:	2300      	movs	r3, #0
 800127e:	73fb      	strb	r3, [r7, #15]
 8001280:	e04a      	b.n	8001318 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	4613      	mov	r3, r2
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	4413      	add	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	440b      	add	r3, r1
 8001290:	333d      	adds	r3, #61	; 0x3d
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	333c      	adds	r3, #60	; 0x3c
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012aa:	7bfa      	ldrb	r2, [r7, #15]
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	b298      	uxth	r0, r3
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	3356      	adds	r3, #86	; 0x56
 80012be:	4602      	mov	r2, r0
 80012c0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	3340      	adds	r3, #64	; 0x40
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4413      	add	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	3344      	adds	r3, #68	; 0x44
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4413      	add	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	440b      	add	r3, r1
 80012f8:	3348      	adds	r3, #72	; 0x48
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	334c      	adds	r3, #76	; 0x4c
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	3301      	adds	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	d3af      	bcc.n	8001282 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e044      	b.n	80013b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001328:	7bfa      	ldrb	r2, [r7, #15]
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4413      	add	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4413      	add	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001350:	7bfa      	ldrb	r2, [r7, #15]
 8001352:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800136a:	7bfa      	ldrb	r2, [r7, #15]
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4413      	add	r3, r2
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4413      	add	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	3301      	adds	r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3b5      	bcc.n	8001328 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	687e      	ldr	r6, [r7, #4]
 80013c4:	466d      	mov	r5, sp
 80013c6:	f106 0410 	add.w	r4, r6, #16
 80013ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80013da:	1d33      	adds	r3, r6, #4
 80013dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013de:	6838      	ldr	r0, [r7, #0]
 80013e0:	f002 fcca 	bl	8003d78 <USB_DevInit>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2202      	movs	r2, #2
 80013ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e014      	b.n	8001420 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140a:	2b01      	cmp	r3, #1
 800140c:	d102      	bne.n	8001414 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f80a 	bl	8001428 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f002 fe6c 	bl	80040f6 <USB_DevDisconnect>

  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001428 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145a:	f043 0303 	orr.w	r3, r3, #3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40007000 	.word	0x40007000

08001490 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_PWREx_GetVoltageRange+0x3c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800149c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a0:	d102      	bne.n	80014a8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80014a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a6:	e00b      	b.n	80014c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_PWREx_GetVoltageRange+0x3c>)
 80014aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b6:	d102      	bne.n	80014be <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80014b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014bc:	e000      	b.n	80014c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80014be:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40007000 	.word	0x40007000

080014d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d141      	bne.n	8001562 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014de:	4b4b      	ldr	r3, [pc, #300]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ea:	d131      	bne.n	8001550 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014ec:	4b47      	ldr	r3, [pc, #284]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014f2:	4a46      	ldr	r2, [pc, #280]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fc:	4b43      	ldr	r3, [pc, #268]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001504:	4a41      	ldr	r2, [pc, #260]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800150c:	4b40      	ldr	r3, [pc, #256]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2232      	movs	r2, #50	; 0x32
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	4a3f      	ldr	r2, [pc, #252]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	0c9b      	lsrs	r3, r3, #18
 800151e:	3301      	adds	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001522:	e002      	b.n	800152a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3b01      	subs	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800152a:	4b38      	ldr	r3, [pc, #224]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001536:	d102      	bne.n	800153e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f2      	bne.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800153e:	4b33      	ldr	r3, [pc, #204]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800154a:	d158      	bne.n	80015fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e057      	b.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001550:	4b2e      	ldr	r3, [pc, #184]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001556:	4a2d      	ldr	r2, [pc, #180]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800155c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001560:	e04d      	b.n	80015fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001568:	d141      	bne.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800156a:	4b28      	ldr	r3, [pc, #160]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001576:	d131      	bne.n	80015dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001578:	4b24      	ldr	r3, [pc, #144]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800157e:	4a23      	ldr	r2, [pc, #140]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001584:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001590:	4a1e      	ldr	r2, [pc, #120]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001596:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2232      	movs	r2, #50	; 0x32
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	4a1c      	ldr	r2, [pc, #112]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	0c9b      	lsrs	r3, r3, #18
 80015aa:	3301      	adds	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ae:	e002      	b.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c2:	d102      	bne.n	80015ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f2      	bne.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d6:	d112      	bne.n	80015fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e011      	b.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80015ec:	e007      	b.n	80015fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	40007000 	.word	0x40007000
 8001610:	20000000 	.word	0x20000000
 8001614:	431bde83 	.word	0x431bde83

08001618 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_PWREx_EnableVddUSB+0x1c>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001626:	6053      	str	r3, [r2, #4]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40007000 	.word	0x40007000

08001638 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_PWREx_EnableVddIO2+0x1c>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001642:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001646:	6053      	str	r3, [r2, #4]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40007000 	.word	0x40007000

08001658 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d102      	bne.n	800166c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	f000 bc68 	b.w	8001f3c <HAL_RCC_OscConfig+0x8e4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166c:	4b97      	ldr	r3, [pc, #604]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001676:	4b95      	ldr	r3, [pc, #596]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80e6 	beq.w	800185a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800168e:	6a3b      	ldr	r3, [r7, #32]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d007      	beq.n	80016a4 <HAL_RCC_OscConfig+0x4c>
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	2b0c      	cmp	r3, #12
 8001698:	f040 808d 	bne.w	80017b6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	f040 8089 	bne.w	80017b6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016a4:	4b89      	ldr	r3, [pc, #548]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d006      	beq.n	80016be <HAL_RCC_OscConfig+0x66>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	f000 bc3f 	b.w	8001f3c <HAL_RCC_OscConfig+0x8e4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c2:	4b82      	ldr	r3, [pc, #520]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d004      	beq.n	80016d8 <HAL_RCC_OscConfig+0x80>
 80016ce:	4b7f      	ldr	r3, [pc, #508]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016d6:	e005      	b.n	80016e4 <HAL_RCC_OscConfig+0x8c>
 80016d8:	4b7c      	ldr	r3, [pc, #496]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80016da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016de:	091b      	lsrs	r3, r3, #4
 80016e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d224      	bcs.n	8001732 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 fe2d 	bl	800234c <RCC_SetFlashLatencyFromMSIRange>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	f000 bc1f 	b.w	8001f3c <HAL_RCC_OscConfig+0x8e4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016fe:	4b73      	ldr	r3, [pc, #460]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a72      	ldr	r2, [pc, #456]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b70      	ldr	r3, [pc, #448]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	496d      	ldr	r1, [pc, #436]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171c:	4b6b      	ldr	r3, [pc, #428]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	4968      	ldr	r1, [pc, #416]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
 8001730:	e025      	b.n	800177e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001732:	4b66      	ldr	r3, [pc, #408]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a65      	ldr	r2, [pc, #404]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b63      	ldr	r3, [pc, #396]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	4960      	ldr	r1, [pc, #384]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001750:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	495b      	ldr	r1, [pc, #364]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fdec 	bl	800234c <RCC_SetFlashLatencyFromMSIRange>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e3de      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800177e:	f000 fd21 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8001782:	4602      	mov	r2, r0
 8001784:	4b51      	ldr	r3, [pc, #324]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	4950      	ldr	r1, [pc, #320]	; (80018d0 <HAL_RCC_OscConfig+0x278>)
 8001790:	5ccb      	ldrb	r3, [r1, r3]
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	fa22 f303 	lsr.w	r3, r2, r3
 800179a:	4a4e      	ldr	r2, [pc, #312]	; (80018d4 <HAL_RCC_OscConfig+0x27c>)
 800179c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800179e:	4b4e      	ldr	r3, [pc, #312]	; (80018d8 <HAL_RCC_OscConfig+0x280>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fa0c 	bl	8000bc0 <HAL_InitTick>
 80017a8:	4603      	mov	r3, r0
 80017aa:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d052      	beq.n	8001858 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	e3c2      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d032      	beq.n	8001824 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017be:	4b43      	ldr	r3, [pc, #268]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a42      	ldr	r2, [pc, #264]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ca:	f7ff fa49 	bl	8000c60 <HAL_GetTick>
 80017ce:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017d2:	f7ff fa45 	bl	8000c60 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e3ab      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017e4:	4b39      	ldr	r3, [pc, #228]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a35      	ldr	r2, [pc, #212]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	4930      	ldr	r1, [pc, #192]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	492b      	ldr	r1, [pc, #172]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
 8001822:	e01a      	b.n	800185a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001824:	4b29      	ldr	r3, [pc, #164]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a28      	ldr	r2, [pc, #160]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001830:	f7ff fa16 	bl	8000c60 <HAL_GetTick>
 8001834:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001838:	f7ff fa12 	bl	8000c60 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e378      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x1e0>
 8001856:	e000      	b.n	800185a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001858:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d073      	beq.n	800194e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	2b08      	cmp	r3, #8
 800186a:	d005      	beq.n	8001878 <HAL_RCC_OscConfig+0x220>
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	2b0c      	cmp	r3, #12
 8001870:	d10e      	bne.n	8001890 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d10b      	bne.n	8001890 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d063      	beq.n	800194c <HAL_RCC_OscConfig+0x2f4>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d15f      	bne.n	800194c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e355      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d106      	bne.n	80018a8 <HAL_RCC_OscConfig+0x250>
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e025      	b.n	80018f4 <HAL_RCC_OscConfig+0x29c>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b0:	d114      	bne.n	80018dc <HAL_RCC_OscConfig+0x284>
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a02      	ldr	r2, [pc, #8]	; (80018cc <HAL_RCC_OscConfig+0x274>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e013      	b.n	80018f4 <HAL_RCC_OscConfig+0x29c>
 80018cc:	40021000 	.word	0x40021000
 80018d0:	0800422c 	.word	0x0800422c
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000004 	.word	0x20000004
 80018dc:	4b8f      	ldr	r3, [pc, #572]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a8e      	ldr	r2, [pc, #568]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b8c      	ldr	r3, [pc, #560]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a8b      	ldr	r2, [pc, #556]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f9b0 	bl	8000c60 <HAL_GetTick>
 8001900:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff f9ac 	bl	8000c60 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e312      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001916:	4b81      	ldr	r3, [pc, #516]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x2ac>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff f99c 	bl	8000c60 <HAL_GetTick>
 8001928:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff f998 	bl	8000c60 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e2fe      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193e:	4b77      	ldr	r3, [pc, #476]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x2d4>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d060      	beq.n	8001a1c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d005      	beq.n	800196c <HAL_RCC_OscConfig+0x314>
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d119      	bne.n	800199a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d116      	bne.n	800199a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196c:	4b6b      	ldr	r3, [pc, #428]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_OscConfig+0x32c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e2db      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001984:	4b65      	ldr	r3, [pc, #404]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	061b      	lsls	r3, r3, #24
 8001992:	4962      	ldr	r1, [pc, #392]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001998:	e040      	b.n	8001a1c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d023      	beq.n	80019ea <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a2:	4b5e      	ldr	r3, [pc, #376]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a5d      	ldr	r2, [pc, #372]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff f957 	bl	8000c60 <HAL_GetTick>
 80019b2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff f953 	bl	8000c60 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e2b9      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	4b54      	ldr	r3, [pc, #336]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b51      	ldr	r3, [pc, #324]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	061b      	lsls	r3, r3, #24
 80019e2:	494e      	ldr	r1, [pc, #312]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
 80019e8:	e018      	b.n	8001a1c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ea:	4b4c      	ldr	r3, [pc, #304]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a4b      	ldr	r2, [pc, #300]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7ff f933 	bl	8000c60 <HAL_GetTick>
 80019fa:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fe:	f7ff f92f 	bl	8000c60 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e295      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a10:	4b42      	ldr	r3, [pc, #264]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8082 	beq.w	8001b2e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d05f      	beq.n	8001af2 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001a32:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a38:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699a      	ldr	r2, [r3, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d037      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e26d      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001a6a:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a70:	4a2a      	ldr	r2, [pc, #168]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a7a:	f7ff f8f1 	bl	8000c60 <HAL_GetTick>
 8001a7e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a82:	f7ff f8ed 	bl	8000c60 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b11      	cmp	r3, #17
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e253      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1ef      	bne.n	8001a82 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa8:	f023 0210 	bic.w	r2, r3, #16
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	491a      	ldr	r1, [pc, #104]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abe:	4a17      	ldr	r2, [pc, #92]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7ff f8ca 	bl	8000c60 <HAL_GetTick>
 8001acc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff f8c6 	bl	8000c60 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b11      	cmp	r3, #17
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e22c      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ef      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x478>
 8001af0:	e01d      	b.n	8001b2e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af8:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b02:	f7ff f8ad 	bl	8000c60 <HAL_GetTick>
 8001b06:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0a:	f7ff f8a9 	bl	8000c60 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b11      	cmp	r3, #17
 8001b16:	d903      	bls.n	8001b20 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e20f      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
 8001b1c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b20:	4b83      	ldr	r3, [pc, #524]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ed      	bne.n	8001b0a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80bd 	beq.w	8001cb6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b42:	4b7b      	ldr	r3, [pc, #492]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10e      	bne.n	8001b6c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	4b78      	ldr	r3, [pc, #480]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	4a77      	ldr	r2, [pc, #476]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6593      	str	r3, [r2, #88]	; 0x58
 8001b5a:	4b75      	ldr	r3, [pc, #468]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b66:	2301      	movs	r3, #1
 8001b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6c:	4b71      	ldr	r3, [pc, #452]	; (8001d34 <HAL_RCC_OscConfig+0x6dc>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d118      	bne.n	8001baa <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b78:	4b6e      	ldr	r3, [pc, #440]	; (8001d34 <HAL_RCC_OscConfig+0x6dc>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a6d      	ldr	r2, [pc, #436]	; (8001d34 <HAL_RCC_OscConfig+0x6dc>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b84:	f7ff f86c 	bl	8000c60 <HAL_GetTick>
 8001b88:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8c:	f7ff f868 	bl	8000c60 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1ce      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9e:	4b65      	ldr	r3, [pc, #404]	; (8001d34 <HAL_RCC_OscConfig+0x6dc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d02c      	beq.n	8001c10 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001bb6:	4b5e      	ldr	r3, [pc, #376]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc8:	4959      	ldr	r1, [pc, #356]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d010      	beq.n	8001bfe <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bdc:	4b54      	ldr	r3, [pc, #336]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	4a53      	ldr	r2, [pc, #332]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bec:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf2:	4a4f      	ldr	r2, [pc, #316]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bfc:	e018      	b.n	8001c30 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bfe:	4b4c      	ldr	r3, [pc, #304]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c04:	4a4a      	ldr	r2, [pc, #296]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c0e:	e00f      	b.n	8001c30 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c10:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	4a46      	ldr	r2, [pc, #280]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c20:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c26:	4a42      	ldr	r2, [pc, #264]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001c28:	f023 0304 	bic.w	r3, r3, #4
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d016      	beq.n	8001c66 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c38:	f7ff f812 	bl	8000c60 <HAL_GetTick>
 8001c3c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c40:	f7ff f80e 	bl	8000c60 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e172      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c56:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ed      	beq.n	8001c40 <HAL_RCC_OscConfig+0x5e8>
 8001c64:	e01d      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c66:	f7fe fffb 	bl	8000c60 <HAL_GetTick>
 8001c6a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f7fe fff7 	bl	8000c60 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e15b      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c84:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1ed      	bne.n	8001c6e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001c92:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a25      	ldr	r2, [pc, #148]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d105      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	4a20      	ldr	r2, [pc, #128]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d041      	beq.n	8001d46 <HAL_RCC_OscConfig+0x6ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d01c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001ccc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cda:	f7fe ffc1 	bl	8000c60 <HAL_GetTick>
 8001cde:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce2:	f7fe ffbd 	bl	8000c60 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e123      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0ef      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x68a>
 8001d02:	e020      	b.n	8001d46 <HAL_RCC_OscConfig+0x6ee>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0a:	4a09      	ldr	r2, [pc, #36]	; (8001d30 <HAL_RCC_OscConfig+0x6d8>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7fe ffa4 	bl	8000c60 <HAL_GetTick>
 8001d18:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d1a:	e00d      	b.n	8001d38 <HAL_RCC_OscConfig+0x6e0>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d1c:	f7fe ffa0 	bl	8000c60 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d906      	bls.n	8001d38 <HAL_RCC_OscConfig+0x6e0>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e106      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d38:	4b82      	ldr	r3, [pc, #520]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1ea      	bne.n	8001d1c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80f5 	beq.w	8001f3a <HAL_RCC_OscConfig+0x8e2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	f040 80cb 	bne.w	8001ef0 <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d5a:	4b7a      	ldr	r3, [pc, #488]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 0203 	and.w	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d12c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d123      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x770>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d113      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x770>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	3b01      	subs	r3, #1
 8001dae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d109      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x770>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	085b      	lsrs	r3, r3, #1
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d06d      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d068      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dce:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d105      	bne.n	8001de6 <HAL_RCC_OscConfig+0x78e>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dda:	4b5a      	ldr	r3, [pc, #360]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x792>
#endif
            )
          {
            return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e0a8      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dea:	4b56      	ldr	r3, [pc, #344]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a55      	ldr	r2, [pc, #340]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001df6:	f7fe ff33 	bl	8000c60 <HAL_GetTick>
 8001dfa:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfe:	f7fe ff2f 	bl	8000c60 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e095      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e10:	4b4c      	ldr	r3, [pc, #304]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1f0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x7a6>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1c:	4b49      	ldr	r3, [pc, #292]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <HAL_RCC_OscConfig+0x8f0>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e2c:	3a01      	subs	r2, #1
 8001e2e:	0112      	lsls	r2, r2, #4
 8001e30:	4311      	orrs	r1, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e36:	0212      	lsls	r2, r2, #8
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0552      	lsls	r2, r2, #21
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e4a:	0852      	lsrs	r2, r2, #1
 8001e4c:	3a01      	subs	r2, #1
 8001e4e:	0652      	lsls	r2, r2, #25
 8001e50:	4311      	orrs	r1, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e56:	06d2      	lsls	r2, r2, #27
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	493a      	ldr	r1, [pc, #232]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e60:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a37      	ldr	r2, [pc, #220]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e6c:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a34      	ldr	r2, [pc, #208]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e78:	f7fe fef2 	bl	8000c60 <HAL_GetTick>
 8001e7c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7fe feee 	bl	8000c60 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e054      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	4b2c      	ldr	r3, [pc, #176]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e9e:	e04c      	b.n	8001f3a <HAL_RCC_OscConfig+0x8e2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e04b      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d144      	bne.n	8001f3a <HAL_RCC_OscConfig+0x8e2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a23      	ldr	r2, [pc, #140]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	4a20      	ldr	r2, [pc, #128]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ec8:	f7fe feca 	bl	8000c60 <HAL_GetTick>
 8001ecc:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7fe fec6 	bl	8000c60 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e02c      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee2:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x878>
 8001eee:	e024      	b.n	8001f3a <HAL_RCC_OscConfig+0x8e2>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d01f      	beq.n	8001f36 <HAL_RCC_OscConfig+0x8de>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001efc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f02:	f7fe fead 	bl	8000c60 <HAL_GetTick>
 8001f06:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x8c4>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0a:	f7fe fea9 	bl	8000c60 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x8c4>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e00f      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x8b2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	4905      	ldr	r1, [pc, #20]	; (8001f44 <HAL_RCC_OscConfig+0x8ec>)
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <HAL_RCC_OscConfig+0x8f4>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	60cb      	str	r3, [r1, #12]
 8001f34:	e001      	b.n	8001f3a <HAL_RCC_OscConfig+0x8e2>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_RCC_OscConfig+0x8e4>
      }
    }
  }
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3728      	adds	r7, #40	; 0x28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	019d800c 	.word	0x019d800c
 8001f4c:	feeefffc 	.word	0xfeeefffc

08001f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e11d      	b.n	80021a4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f68:	4b90      	ldr	r3, [pc, #576]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d910      	bls.n	8001f98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b8d      	ldr	r3, [pc, #564]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 020f 	bic.w	r2, r3, #15
 8001f7e:	498b      	ldr	r1, [pc, #556]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b89      	ldr	r3, [pc, #548]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e105      	b.n	80021a4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d010      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	4b81      	ldr	r3, [pc, #516]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d908      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb4:	4b7e      	ldr	r3, [pc, #504]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	497b      	ldr	r1, [pc, #492]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d079      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d11e      	bne.n	8002018 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fda:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e0dc      	b.n	80021a4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001fea:	f000 fa09 	bl	8002400 <RCC_GetSysClockFreqFromPLLSource>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a70      	ldr	r2, [pc, #448]	; (80021b4 <HAL_RCC_ClockConfig+0x264>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d946      	bls.n	8002084 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d140      	bne.n	8002084 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002002:	4b6b      	ldr	r3, [pc, #428]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800200a:	4a69      	ldr	r2, [pc, #420]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 800200c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002010:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002012:	2380      	movs	r3, #128	; 0x80
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	e035      	b.n	8002084 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d107      	bne.n	8002030 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002020:	4b63      	ldr	r3, [pc, #396]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d115      	bne.n	8002058 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0b9      	b.n	80021a4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002038:	4b5d      	ldr	r3, [pc, #372]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0ad      	b.n	80021a4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002048:	4b59      	ldr	r3, [pc, #356]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0a5      	b.n	80021a4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002058:	f000 f8b4 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 800205c:	4603      	mov	r3, r0
 800205e:	4a55      	ldr	r2, [pc, #340]	; (80021b4 <HAL_RCC_ClockConfig+0x264>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d90f      	bls.n	8002084 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002064:	4b52      	ldr	r3, [pc, #328]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d109      	bne.n	8002084 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002070:	4b4f      	ldr	r3, [pc, #316]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002078:	4a4d      	ldr	r2, [pc, #308]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 800207a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800207e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002084:	4b4a      	ldr	r3, [pc, #296]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 0203 	bic.w	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4947      	ldr	r1, [pc, #284]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002096:	f7fe fde3 	bl	8000c60 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800209e:	f7fe fddf 	bl	8000c60 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e077      	b.n	80021a4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b4:	4b3e      	ldr	r3, [pc, #248]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 020c 	and.w	r2, r3, #12
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d1eb      	bne.n	800209e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b80      	cmp	r3, #128	; 0x80
 80020ca:	d105      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020cc:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4a37      	ldr	r2, [pc, #220]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 80020d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020d6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d010      	beq.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d208      	bcs.n	8002106 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	492b      	ldr	r1, [pc, #172]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002106:	4b29      	ldr	r3, [pc, #164]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d210      	bcs.n	8002136 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002114:	4b25      	ldr	r3, [pc, #148]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 020f 	bic.w	r2, r3, #15
 800211c:	4923      	ldr	r1, [pc, #140]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002124:	4b21      	ldr	r3, [pc, #132]	; (80021ac <HAL_RCC_ClockConfig+0x25c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e036      	b.n	80021a4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d008      	beq.n	8002154 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002142:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	4918      	ldr	r1, [pc, #96]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002150:	4313      	orrs	r3, r2
 8002152:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d009      	beq.n	8002174 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4910      	ldr	r1, [pc, #64]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 8002170:	4313      	orrs	r3, r2
 8002172:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002174:	f000 f826 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_RCC_ClockConfig+0x260>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	091b      	lsrs	r3, r3, #4
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	490c      	ldr	r1, [pc, #48]	; (80021b8 <HAL_RCC_ClockConfig+0x268>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
 8002190:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <HAL_RCC_ClockConfig+0x26c>)
 8002192:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_RCC_ClockConfig+0x270>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe fd11 	bl	8000bc0 <HAL_InitTick>
 800219e:	4603      	mov	r3, r0
 80021a0:	73fb      	strb	r3, [r7, #15]

  return status;
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40022000 	.word	0x40022000
 80021b0:	40021000 	.word	0x40021000
 80021b4:	04c4b400 	.word	0x04c4b400
 80021b8:	0800422c 	.word	0x0800422c
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000004 	.word	0x20000004

080021c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d2:	4b3e      	ldr	r3, [pc, #248]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x34>
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d121      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d11e      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021f8:	4b34      	ldr	r3, [pc, #208]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	e005      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002214:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002220:	4a2b      	ldr	r2, [pc, #172]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002228:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10d      	bne.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002234:	e00a      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d102      	bne.n	8002242 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800223c:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	e004      	b.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b08      	cmp	r3, #8
 8002246:	d101      	bne.n	800224c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002248:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800224a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d134      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d003      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0xa6>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d003      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0xac>
 8002268:	e005      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800226c:	617b      	str	r3, [r7, #20]
      break;
 800226e:	e005      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002272:	617b      	str	r3, [r7, #20]
      break;
 8002274:	e002      	b.n	800227c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	3301      	adds	r3, #1
 8002288:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	fb03 f202 	mul.w	r2, r3, r2
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_GetSysClockFreq+0x108>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	0e5b      	lsrs	r3, r3, #25
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	3301      	adds	r3, #1
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022bc:	69bb      	ldr	r3, [r7, #24]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08004244 	.word	0x08004244
 80022d4:	00f42400 	.word	0x00f42400
 80022d8:	007a1200 	.word	0x007a1200

080022dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000000 	.word	0x20000000

080022f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022f8:	f7ff fff0 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	4904      	ldr	r1, [pc, #16]	; (800231c <HAL_RCC_GetPCLK1Freq+0x28>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	0800423c 	.word	0x0800423c

08002320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002324:	f7ff ffda 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	0adb      	lsrs	r3, r3, #11
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4904      	ldr	r1, [pc, #16]	; (8002348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	0800423c 	.word	0x0800423c

0800234c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002358:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002364:	f7ff f894 	bl	8001490 <HAL_PWREx_GetVoltageRange>
 8002368:	6178      	str	r0, [r7, #20]
 800236a:	e014      	b.n	8002396 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002376:	6593      	str	r3, [r2, #88]	; 0x58
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002384:	f7ff f884 	bl	8001490 <HAL_PWREx_GetVoltageRange>
 8002388:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	4a1a      	ldr	r2, [pc, #104]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002394:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800239c:	d10b      	bne.n	80023b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b80      	cmp	r3, #128	; 0x80
 80023a2:	d913      	bls.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2ba0      	cmp	r3, #160	; 0xa0
 80023a8:	d902      	bls.n	80023b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023aa:	2302      	movs	r3, #2
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	e00d      	b.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023b0:	2301      	movs	r3, #1
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	e00a      	b.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b7f      	cmp	r3, #127	; 0x7f
 80023ba:	d902      	bls.n	80023c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80023bc:	2302      	movs	r3, #2
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	e004      	b.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b70      	cmp	r3, #112	; 0x70
 80023c6:	d101      	bne.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023c8:	2301      	movs	r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 020f 	bic.w	r2, r3, #15
 80023d4:	4909      	ldr	r1, [pc, #36]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023dc:	4b07      	ldr	r3, [pc, #28]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d001      	beq.n	80023ee <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40022000 	.word	0x40022000

08002400 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b03      	cmp	r3, #3
 8002414:	d00b      	beq.n	800242e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d825      	bhi.n	8002468 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d008      	beq.n	8002434 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d11f      	bne.n	8002468 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002428:	4b25      	ldr	r3, [pc, #148]	; (80024c0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800242a:	613b      	str	r3, [r7, #16]
    break;
 800242c:	e01f      	b.n	800246e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800242e:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002430:	613b      	str	r3, [r7, #16]
    break;
 8002432:	e01c      	b.n	800246e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002434:	4b21      	ldr	r3, [pc, #132]	; (80024bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d107      	bne.n	8002450 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002440:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	e005      	b.n	800245c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800245c:	4a1a      	ldr	r2, [pc, #104]	; (80024c8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002464:	613b      	str	r3, [r7, #16]
    break;
 8002466:	e002      	b.n	800246e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
    break;
 800246c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	3301      	adds	r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	fb03 f202 	mul.w	r2, r3, r2
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002492:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	0e5b      	lsrs	r3, r3, #25
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	3301      	adds	r3, #1
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ac:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80024ae:	683b      	ldr	r3, [r7, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	371c      	adds	r7, #28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	40021000 	.word	0x40021000
 80024c0:	00f42400 	.word	0x00f42400
 80024c4:	007a1200 	.word	0x007a1200
 80024c8:	08004244 	.word	0x08004244

080024cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024d4:	2300      	movs	r3, #0
 80024d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024d8:	2300      	movs	r3, #0
 80024da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d040      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ec:	2b80      	cmp	r3, #128	; 0x80
 80024ee:	d02a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80024f0:	2b80      	cmp	r3, #128	; 0x80
 80024f2:	d825      	bhi.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80024f4:	2b60      	cmp	r3, #96	; 0x60
 80024f6:	d026      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80024f8:	2b60      	cmp	r3, #96	; 0x60
 80024fa:	d821      	bhi.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d006      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d81d      	bhi.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d009      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002508:	2b20      	cmp	r3, #32
 800250a:	d010      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800250c:	e018      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800250e:	4b89      	ldr	r3, [pc, #548]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	4a88      	ldr	r2, [pc, #544]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800251a:	e015      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fb4e 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800252c:	e00c      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3320      	adds	r3, #32
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fc39 	bl	8002dac <RCCEx_PLLSAI2_Config>
 800253a:	4603      	mov	r3, r0
 800253c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800253e:	e003      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	74fb      	strb	r3, [r7, #19]
      break;
 8002544:	e000      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10b      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800254e:	4b79      	ldr	r3, [pc, #484]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002550:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002554:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255c:	4975      	ldr	r1, [pc, #468]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002564:	e001      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d047      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257e:	d030      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002584:	d82a      	bhi.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800258a:	d02a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800258c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002590:	d824      	bhi.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002596:	d008      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800259c:	d81e      	bhi.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80025a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a6:	d010      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025a8:	e018      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025aa:	4b62      	ldr	r3, [pc, #392]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	4a61      	ldr	r2, [pc, #388]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b6:	e015      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fb00 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025c8:	e00c      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3320      	adds	r3, #32
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fbeb 	bl	8002dac <RCCEx_PLLSAI2_Config>
 80025d6:	4603      	mov	r3, r0
 80025d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025da:	e003      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	74fb      	strb	r3, [r7, #19]
      break;
 80025e0:	e000      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80025e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10b      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025ea:	4b52      	ldr	r3, [pc, #328]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	494e      	ldr	r1, [pc, #312]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002600:	e001      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002602:	7cfb      	ldrb	r3, [r7, #19]
 8002604:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 809f 	beq.w	8002752 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002614:	2300      	movs	r3, #0
 8002616:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002618:	4b46      	ldr	r3, [pc, #280]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002628:	2300      	movs	r3, #0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00d      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	4a40      	ldr	r2, [pc, #256]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	6593      	str	r3, [r2, #88]	; 0x58
 800263a:	4b3e      	ldr	r3, [pc, #248]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002646:	2301      	movs	r3, #1
 8002648:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800264a:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a3a      	ldr	r2, [pc, #232]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002654:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002656:	f7fe fb03 	bl	8000c60 <HAL_GetTick>
 800265a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800265c:	e009      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265e:	f7fe faff 	bl	8000c60 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d902      	bls.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	74fb      	strb	r3, [r7, #19]
        break;
 8002670:	e005      	b.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002672:	4b31      	ldr	r3, [pc, #196]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0ef      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d15b      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002684:	4b2b      	ldr	r3, [pc, #172]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01f      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d019      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026ae:	4b21      	ldr	r3, [pc, #132]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	4a1b      	ldr	r2, [pc, #108]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026ce:	4a19      	ldr	r2, [pc, #100]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d016      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fabe 	bl	8000c60 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e6:	e00b      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e8:	f7fe faba 	bl	8000c60 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d902      	bls.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	74fb      	strb	r3, [r7, #19]
            break;
 80026fe:	e006      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0ec      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10c      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002724:	4903      	ldr	r1, [pc, #12]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800272c:	e008      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800272e:	7cfb      	ldrb	r3, [r7, #19]
 8002730:	74bb      	strb	r3, [r7, #18]
 8002732:	e005      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002734:	40021000 	.word	0x40021000
 8002738:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002740:	7c7b      	ldrb	r3, [r7, #17]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d105      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002746:	4ba0      	ldr	r3, [pc, #640]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	4a9f      	ldr	r2, [pc, #636]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800274c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002750:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800275e:	4b9a      	ldr	r3, [pc, #616]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f023 0203 	bic.w	r2, r3, #3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276c:	4996      	ldr	r1, [pc, #600]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002780:	4b91      	ldr	r3, [pc, #580]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f023 020c 	bic.w	r2, r3, #12
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	498e      	ldr	r1, [pc, #568]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00a      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027a2:	4b89      	ldr	r3, [pc, #548]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	4985      	ldr	r1, [pc, #532]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00a      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027c4:	4b80      	ldr	r3, [pc, #512]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d2:	497d      	ldr	r1, [pc, #500]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027e6:	4b78      	ldr	r3, [pc, #480]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f4:	4974      	ldr	r1, [pc, #464]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002808:	4b6f      	ldr	r3, [pc, #444]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002816:	496c      	ldr	r1, [pc, #432]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00a      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800282a:	4b67      	ldr	r3, [pc, #412]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800282c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002830:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002838:	4963      	ldr	r1, [pc, #396]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800284c:	4b5e      	ldr	r3, [pc, #376]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002852:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800285a:	495b      	ldr	r1, [pc, #364]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800285c:	4313      	orrs	r3, r2
 800285e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800286e:	4b56      	ldr	r3, [pc, #344]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002874:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	4952      	ldr	r1, [pc, #328]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00a      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002890:	4b4d      	ldr	r3, [pc, #308]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	494a      	ldr	r1, [pc, #296]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00a      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028b2:	4b45      	ldr	r3, [pc, #276]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	4941      	ldr	r1, [pc, #260]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028d4:	4b3c      	ldr	r3, [pc, #240]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e2:	4939      	ldr	r1, [pc, #228]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d028      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028f6:	4b34      	ldr	r3, [pc, #208]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002904:	4930      	ldr	r1, [pc, #192]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002910:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002914:	d106      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002916:	4b2c      	ldr	r3, [pc, #176]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	4a2b      	ldr	r2, [pc, #172]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800291c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002920:	60d3      	str	r3, [r2, #12]
 8002922:	e011      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002928:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800292c:	d10c      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3304      	adds	r3, #4
 8002932:	2101      	movs	r1, #1
 8002934:	4618      	mov	r0, r3
 8002936:	f000 f945 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 800293a:	4603      	mov	r3, r0
 800293c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800293e:	7cfb      	ldrb	r3, [r7, #19]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002944:	7cfb      	ldrb	r3, [r7, #19]
 8002946:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d04d      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800295c:	d108      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002960:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002964:	4a18      	ldr	r2, [pc, #96]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800296a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800296e:	e012      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002972:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002976:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002978:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800297c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800298e:	490e      	ldr	r1, [pc, #56]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800299a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299e:	d106      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a0:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029aa:	60d3      	str	r3, [r2, #12]
 80029ac:	e020      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029b6:	d109      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a02      	ldr	r2, [pc, #8]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c2:	60d3      	str	r3, [r2, #12]
 80029c4:	e014      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3304      	adds	r3, #4
 80029da:	2101      	movs	r1, #1
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 f8f1 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 80029e2:	4603      	mov	r3, r0
 80029e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029e6:	7cfb      	ldrb	r3, [r7, #19]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d028      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029fc:	4b68      	ldr	r3, [pc, #416]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a0a:	4965      	ldr	r1, [pc, #404]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a1c:	4b60      	ldr	r3, [pc, #384]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a5f      	ldr	r2, [pc, #380]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a26:	60d3      	str	r3, [r2, #12]
 8002a28:	e011      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a32:	d10c      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3304      	adds	r3, #4
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f8c2 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a44:	7cfb      	ldrb	r3, [r7, #19]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002a4a:	7cfb      	ldrb	r3, [r7, #19]
 8002a4c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01e      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a5a:	4b51      	ldr	r3, [pc, #324]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a6a:	494d      	ldr	r1, [pc, #308]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2102      	movs	r1, #2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 f89d 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00b      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002aa4:	4b3e      	ldr	r3, [pc, #248]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aaa:	f023 0204 	bic.w	r2, r3, #4
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab4:	493a      	ldr	r1, [pc, #232]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ac8:	4b35      	ldr	r3, [pc, #212]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ace:	f023 0218 	bic.w	r2, r3, #24
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad8:	4931      	ldr	r1, [pc, #196]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d035      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002aec:	4b2c      	ldr	r3, [pc, #176]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2b      	ldr	r2, [pc, #172]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af8:	f7fe f8b2 	bl	8000c60 <HAL_GetTick>
 8002afc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002afe:	e009      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b00:	f7fe f8ae 	bl	8000c60 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d902      	bls.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	74fb      	strb	r3, [r7, #19]
        break;
 8002b12:	e005      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b14:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ef      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d113      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8002b26:	4b1e      	ldr	r3, [pc, #120]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002b28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b36:	491a      	ldr	r1, [pc, #104]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3320      	adds	r3, #32
 8002b42:	2102      	movs	r1, #2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 f931 	bl	8002dac <RCCEx_PLLSAI2_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8002b54:	7cfb      	ldrb	r3, [r7, #19]
 8002b56:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d017      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002b66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b74:	490a      	ldr	r1, [pc, #40]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b86:	d105      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8002b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b94:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002bae:	f043 0304 	orr.w	r3, r3, #4
 8002bb2:	6013      	str	r3, [r2, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bd2:	4b72      	ldr	r3, [pc, #456]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00e      	beq.n	8002bfc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bde:	4b6f      	ldr	r3, [pc, #444]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0203 	and.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d103      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d142      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
 8002bfa:	e03f      	b.n	8002c7c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d018      	beq.n	8002c36 <RCCEx_PLLSAI1_Config+0x72>
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d825      	bhi.n	8002c54 <RCCEx_PLLSAI1_Config+0x90>
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d002      	beq.n	8002c12 <RCCEx_PLLSAI1_Config+0x4e>
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d009      	beq.n	8002c24 <RCCEx_PLLSAI1_Config+0x60>
 8002c10:	e020      	b.n	8002c54 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c12:	4b62      	ldr	r3, [pc, #392]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d11d      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c22:	e01a      	b.n	8002c5a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c24:	4b5d      	ldr	r3, [pc, #372]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d116      	bne.n	8002c5e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c34:	e013      	b.n	8002c5e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c36:	4b59      	ldr	r3, [pc, #356]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10f      	bne.n	8002c62 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c42:	4b56      	ldr	r3, [pc, #344]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c52:	e006      	b.n	8002c62 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      break;
 8002c58:	e004      	b.n	8002c64 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e002      	b.n	8002c64 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002c62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d108      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002c6a:	4b4c      	ldr	r3, [pc, #304]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f023 0203 	bic.w	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4949      	ldr	r1, [pc, #292]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 8086 	bne.w	8002d90 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c84:	4b45      	ldr	r3, [pc, #276]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a44      	ldr	r2, [pc, #272]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c90:	f7fd ffe6 	bl	8000c60 <HAL_GetTick>
 8002c94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c96:	e009      	b.n	8002cac <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c98:	f7fd ffe2 	bl	8000c60 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d902      	bls.n	8002cac <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	73fb      	strb	r3, [r7, #15]
        break;
 8002caa:	e005      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cac:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ef      	bne.n	8002c98 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d168      	bne.n	8002d90 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d113      	bne.n	8002cec <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cc4:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6892      	ldr	r2, [r2, #8]
 8002cd0:	0211      	lsls	r1, r2, #8
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68d2      	ldr	r2, [r2, #12]
 8002cd6:	06d2      	lsls	r2, r2, #27
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6852      	ldr	r2, [r2, #4]
 8002cde:	3a01      	subs	r2, #1
 8002ce0:	0112      	lsls	r2, r2, #4
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	492d      	ldr	r1, [pc, #180]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	610b      	str	r3, [r1, #16]
 8002cea:	e02d      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d115      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf2:	4b2a      	ldr	r3, [pc, #168]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6892      	ldr	r2, [r2, #8]
 8002cfe:	0211      	lsls	r1, r2, #8
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6912      	ldr	r2, [r2, #16]
 8002d04:	0852      	lsrs	r2, r2, #1
 8002d06:	3a01      	subs	r2, #1
 8002d08:	0552      	lsls	r2, r2, #21
 8002d0a:	4311      	orrs	r1, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6852      	ldr	r2, [r2, #4]
 8002d10:	3a01      	subs	r2, #1
 8002d12:	0112      	lsls	r2, r2, #4
 8002d14:	430a      	orrs	r2, r1
 8002d16:	4921      	ldr	r1, [pc, #132]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	610b      	str	r3, [r1, #16]
 8002d1c:	e014      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d1e:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6892      	ldr	r2, [r2, #8]
 8002d2a:	0211      	lsls	r1, r2, #8
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6952      	ldr	r2, [r2, #20]
 8002d30:	0852      	lsrs	r2, r2, #1
 8002d32:	3a01      	subs	r2, #1
 8002d34:	0652      	lsls	r2, r2, #25
 8002d36:	4311      	orrs	r1, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6852      	ldr	r2, [r2, #4]
 8002d3c:	3a01      	subs	r2, #1
 8002d3e:	0112      	lsls	r2, r2, #4
 8002d40:	430a      	orrs	r2, r1
 8002d42:	4916      	ldr	r1, [pc, #88]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a13      	ldr	r2, [pc, #76]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fd ff84 	bl	8000c60 <HAL_GetTick>
 8002d58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d5a:	e009      	b.n	8002d70 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d5c:	f7fd ff80 	bl	8000c60 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d902      	bls.n	8002d70 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d6e:	e005      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d70:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0ef      	beq.n	8002d5c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	4904      	ldr	r1, [pc, #16]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	07ff800f 	.word	0x07ff800f
 8002da4:	ff9f800f 	.word	0xff9f800f
 8002da8:	f9ff800f 	.word	0xf9ff800f

08002dac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dba:	4b72      	ldr	r3, [pc, #456]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00e      	beq.n	8002de4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dc6:	4b6f      	ldr	r3, [pc, #444]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0203 	and.w	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d103      	bne.n	8002dde <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
       ||
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d142      	bne.n	8002e64 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	e03f      	b.n	8002e64 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d018      	beq.n	8002e1e <RCCEx_PLLSAI2_Config+0x72>
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d825      	bhi.n	8002e3c <RCCEx_PLLSAI2_Config+0x90>
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d002      	beq.n	8002dfa <RCCEx_PLLSAI2_Config+0x4e>
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d009      	beq.n	8002e0c <RCCEx_PLLSAI2_Config+0x60>
 8002df8:	e020      	b.n	8002e3c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dfa:	4b62      	ldr	r3, [pc, #392]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d11d      	bne.n	8002e42 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e0a:	e01a      	b.n	8002e42 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e0c:	4b5d      	ldr	r3, [pc, #372]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d116      	bne.n	8002e46 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1c:	e013      	b.n	8002e46 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e1e:	4b59      	ldr	r3, [pc, #356]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e2a:	4b56      	ldr	r3, [pc, #344]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e3a:	e006      	b.n	8002e4a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e40:	e004      	b.n	8002e4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e42:	bf00      	nop
 8002e44:	e002      	b.n	8002e4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d108      	bne.n	8002e64 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002e52:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 0203 	bic.w	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4949      	ldr	r1, [pc, #292]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 8086 	bne.w	8002f78 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e6c:	4b45      	ldr	r3, [pc, #276]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a44      	ldr	r2, [pc, #272]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e78:	f7fd fef2 	bl	8000c60 <HAL_GetTick>
 8002e7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e7e:	e009      	b.n	8002e94 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e80:	f7fd feee 	bl	8000c60 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d902      	bls.n	8002e94 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	73fb      	strb	r3, [r7, #15]
        break;
 8002e92:	e005      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e94:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ef      	bne.n	8002e80 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d168      	bne.n	8002f78 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d113      	bne.n	8002ed4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eac:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	4b35      	ldr	r3, [pc, #212]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6892      	ldr	r2, [r2, #8]
 8002eb8:	0211      	lsls	r1, r2, #8
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68d2      	ldr	r2, [r2, #12]
 8002ebe:	06d2      	lsls	r2, r2, #27
 8002ec0:	4311      	orrs	r1, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6852      	ldr	r2, [r2, #4]
 8002ec6:	3a01      	subs	r2, #1
 8002ec8:	0112      	lsls	r2, r2, #4
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	492d      	ldr	r1, [pc, #180]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	614b      	str	r3, [r1, #20]
 8002ed2:	e02d      	b.n	8002f30 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d115      	bne.n	8002f06 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eda:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <RCCEx_PLLSAI2_Config+0x1e0>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6892      	ldr	r2, [r2, #8]
 8002ee6:	0211      	lsls	r1, r2, #8
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6912      	ldr	r2, [r2, #16]
 8002eec:	0852      	lsrs	r2, r2, #1
 8002eee:	3a01      	subs	r2, #1
 8002ef0:	0552      	lsls	r2, r2, #21
 8002ef2:	4311      	orrs	r1, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6852      	ldr	r2, [r2, #4]
 8002ef8:	3a01      	subs	r2, #1
 8002efa:	0112      	lsls	r2, r2, #4
 8002efc:	430a      	orrs	r2, r1
 8002efe:	4921      	ldr	r1, [pc, #132]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	614b      	str	r3, [r1, #20]
 8002f04:	e014      	b.n	8002f30 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f06:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6892      	ldr	r2, [r2, #8]
 8002f12:	0211      	lsls	r1, r2, #8
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6952      	ldr	r2, [r2, #20]
 8002f18:	0852      	lsrs	r2, r2, #1
 8002f1a:	3a01      	subs	r2, #1
 8002f1c:	0652      	lsls	r2, r2, #25
 8002f1e:	4311      	orrs	r1, r2
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6852      	ldr	r2, [r2, #4]
 8002f24:	3a01      	subs	r2, #1
 8002f26:	0112      	lsls	r2, r2, #4
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	4916      	ldr	r1, [pc, #88]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fd fe90 	bl	8000c60 <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f42:	e009      	b.n	8002f58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f44:	f7fd fe8c 	bl	8000c60 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d902      	bls.n	8002f58 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	73fb      	strb	r3, [r7, #15]
          break;
 8002f56:	e005      	b.n	8002f64 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ef      	beq.n	8002f44 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	4904      	ldr	r1, [pc, #16]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	07ff800f 	.word	0x07ff800f
 8002f8c:	ff9f800f 	.word	0xff9f800f
 8002f90:	f9ff800f 	.word	0xf9ff800f

08002f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e042      	b.n	800302c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d106      	bne.n	8002fbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7fd fc87 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2224      	movs	r2, #36	; 0x24
 8002fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fb24 	bl	800362c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f825 	bl	8003034 <UART_SetConfig>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e01b      	b.n	800302c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0201 	orr.w	r2, r2, #1
 8003022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fba3 	bl	8003770 <UART_CheckIdleState>
 800302a:	4603      	mov	r3, r0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003038:	b08c      	sub	sp, #48	; 0x30
 800303a:	af00      	add	r7, sp, #0
 800303c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	431a      	orrs	r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	431a      	orrs	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	4313      	orrs	r3, r2
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4baa      	ldr	r3, [pc, #680]	; (800330c <UART_SetConfig+0x2d8>)
 8003064:	4013      	ands	r3, r2
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800306c:	430b      	orrs	r3, r1
 800306e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a9f      	ldr	r2, [pc, #636]	; (8003310 <UART_SetConfig+0x2dc>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d004      	beq.n	80030a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800309c:	4313      	orrs	r3, r2
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80030aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	f023 010f 	bic.w	r1, r3, #15
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a90      	ldr	r2, [pc, #576]	; (8003314 <UART_SetConfig+0x2e0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d125      	bne.n	8003124 <UART_SetConfig+0xf0>
 80030d8:	4b8f      	ldr	r3, [pc, #572]	; (8003318 <UART_SetConfig+0x2e4>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d81a      	bhi.n	800311c <UART_SetConfig+0xe8>
 80030e6:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <UART_SetConfig+0xb8>)
 80030e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ec:	080030fd 	.word	0x080030fd
 80030f0:	0800310d 	.word	0x0800310d
 80030f4:	08003105 	.word	0x08003105
 80030f8:	08003115 	.word	0x08003115
 80030fc:	2301      	movs	r3, #1
 80030fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003102:	e116      	b.n	8003332 <UART_SetConfig+0x2fe>
 8003104:	2302      	movs	r3, #2
 8003106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800310a:	e112      	b.n	8003332 <UART_SetConfig+0x2fe>
 800310c:	2304      	movs	r3, #4
 800310e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003112:	e10e      	b.n	8003332 <UART_SetConfig+0x2fe>
 8003114:	2308      	movs	r3, #8
 8003116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800311a:	e10a      	b.n	8003332 <UART_SetConfig+0x2fe>
 800311c:	2310      	movs	r3, #16
 800311e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003122:	e106      	b.n	8003332 <UART_SetConfig+0x2fe>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a7c      	ldr	r2, [pc, #496]	; (800331c <UART_SetConfig+0x2e8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d138      	bne.n	80031a0 <UART_SetConfig+0x16c>
 800312e:	4b7a      	ldr	r3, [pc, #488]	; (8003318 <UART_SetConfig+0x2e4>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b0c      	cmp	r3, #12
 800313a:	d82d      	bhi.n	8003198 <UART_SetConfig+0x164>
 800313c:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <UART_SetConfig+0x110>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003179 	.word	0x08003179
 8003148:	08003199 	.word	0x08003199
 800314c:	08003199 	.word	0x08003199
 8003150:	08003199 	.word	0x08003199
 8003154:	08003189 	.word	0x08003189
 8003158:	08003199 	.word	0x08003199
 800315c:	08003199 	.word	0x08003199
 8003160:	08003199 	.word	0x08003199
 8003164:	08003181 	.word	0x08003181
 8003168:	08003199 	.word	0x08003199
 800316c:	08003199 	.word	0x08003199
 8003170:	08003199 	.word	0x08003199
 8003174:	08003191 	.word	0x08003191
 8003178:	2300      	movs	r3, #0
 800317a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800317e:	e0d8      	b.n	8003332 <UART_SetConfig+0x2fe>
 8003180:	2302      	movs	r3, #2
 8003182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003186:	e0d4      	b.n	8003332 <UART_SetConfig+0x2fe>
 8003188:	2304      	movs	r3, #4
 800318a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800318e:	e0d0      	b.n	8003332 <UART_SetConfig+0x2fe>
 8003190:	2308      	movs	r3, #8
 8003192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003196:	e0cc      	b.n	8003332 <UART_SetConfig+0x2fe>
 8003198:	2310      	movs	r3, #16
 800319a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800319e:	e0c8      	b.n	8003332 <UART_SetConfig+0x2fe>
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a5e      	ldr	r2, [pc, #376]	; (8003320 <UART_SetConfig+0x2ec>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d125      	bne.n	80031f6 <UART_SetConfig+0x1c2>
 80031aa:	4b5b      	ldr	r3, [pc, #364]	; (8003318 <UART_SetConfig+0x2e4>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031b4:	2b30      	cmp	r3, #48	; 0x30
 80031b6:	d016      	beq.n	80031e6 <UART_SetConfig+0x1b2>
 80031b8:	2b30      	cmp	r3, #48	; 0x30
 80031ba:	d818      	bhi.n	80031ee <UART_SetConfig+0x1ba>
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d00a      	beq.n	80031d6 <UART_SetConfig+0x1a2>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d814      	bhi.n	80031ee <UART_SetConfig+0x1ba>
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <UART_SetConfig+0x19a>
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d008      	beq.n	80031de <UART_SetConfig+0x1aa>
 80031cc:	e00f      	b.n	80031ee <UART_SetConfig+0x1ba>
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031d4:	e0ad      	b.n	8003332 <UART_SetConfig+0x2fe>
 80031d6:	2302      	movs	r3, #2
 80031d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031dc:	e0a9      	b.n	8003332 <UART_SetConfig+0x2fe>
 80031de:	2304      	movs	r3, #4
 80031e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031e4:	e0a5      	b.n	8003332 <UART_SetConfig+0x2fe>
 80031e6:	2308      	movs	r3, #8
 80031e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ec:	e0a1      	b.n	8003332 <UART_SetConfig+0x2fe>
 80031ee:	2310      	movs	r3, #16
 80031f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031f4:	e09d      	b.n	8003332 <UART_SetConfig+0x2fe>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a4a      	ldr	r2, [pc, #296]	; (8003324 <UART_SetConfig+0x2f0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d125      	bne.n	800324c <UART_SetConfig+0x218>
 8003200:	4b45      	ldr	r3, [pc, #276]	; (8003318 <UART_SetConfig+0x2e4>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800320a:	2bc0      	cmp	r3, #192	; 0xc0
 800320c:	d016      	beq.n	800323c <UART_SetConfig+0x208>
 800320e:	2bc0      	cmp	r3, #192	; 0xc0
 8003210:	d818      	bhi.n	8003244 <UART_SetConfig+0x210>
 8003212:	2b80      	cmp	r3, #128	; 0x80
 8003214:	d00a      	beq.n	800322c <UART_SetConfig+0x1f8>
 8003216:	2b80      	cmp	r3, #128	; 0x80
 8003218:	d814      	bhi.n	8003244 <UART_SetConfig+0x210>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <UART_SetConfig+0x1f0>
 800321e:	2b40      	cmp	r3, #64	; 0x40
 8003220:	d008      	beq.n	8003234 <UART_SetConfig+0x200>
 8003222:	e00f      	b.n	8003244 <UART_SetConfig+0x210>
 8003224:	2300      	movs	r3, #0
 8003226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800322a:	e082      	b.n	8003332 <UART_SetConfig+0x2fe>
 800322c:	2302      	movs	r3, #2
 800322e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003232:	e07e      	b.n	8003332 <UART_SetConfig+0x2fe>
 8003234:	2304      	movs	r3, #4
 8003236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800323a:	e07a      	b.n	8003332 <UART_SetConfig+0x2fe>
 800323c:	2308      	movs	r3, #8
 800323e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003242:	e076      	b.n	8003332 <UART_SetConfig+0x2fe>
 8003244:	2310      	movs	r3, #16
 8003246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800324a:	e072      	b.n	8003332 <UART_SetConfig+0x2fe>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a35      	ldr	r2, [pc, #212]	; (8003328 <UART_SetConfig+0x2f4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d12a      	bne.n	80032ac <UART_SetConfig+0x278>
 8003256:	4b30      	ldr	r3, [pc, #192]	; (8003318 <UART_SetConfig+0x2e4>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003264:	d01a      	beq.n	800329c <UART_SetConfig+0x268>
 8003266:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800326a:	d81b      	bhi.n	80032a4 <UART_SetConfig+0x270>
 800326c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003270:	d00c      	beq.n	800328c <UART_SetConfig+0x258>
 8003272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003276:	d815      	bhi.n	80032a4 <UART_SetConfig+0x270>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <UART_SetConfig+0x250>
 800327c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003280:	d008      	beq.n	8003294 <UART_SetConfig+0x260>
 8003282:	e00f      	b.n	80032a4 <UART_SetConfig+0x270>
 8003284:	2300      	movs	r3, #0
 8003286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800328a:	e052      	b.n	8003332 <UART_SetConfig+0x2fe>
 800328c:	2302      	movs	r3, #2
 800328e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003292:	e04e      	b.n	8003332 <UART_SetConfig+0x2fe>
 8003294:	2304      	movs	r3, #4
 8003296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800329a:	e04a      	b.n	8003332 <UART_SetConfig+0x2fe>
 800329c:	2308      	movs	r3, #8
 800329e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032a2:	e046      	b.n	8003332 <UART_SetConfig+0x2fe>
 80032a4:	2310      	movs	r3, #16
 80032a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032aa:	e042      	b.n	8003332 <UART_SetConfig+0x2fe>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a17      	ldr	r2, [pc, #92]	; (8003310 <UART_SetConfig+0x2dc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d13a      	bne.n	800332c <UART_SetConfig+0x2f8>
 80032b6:	4b18      	ldr	r3, [pc, #96]	; (8003318 <UART_SetConfig+0x2e4>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032c4:	d01a      	beq.n	80032fc <UART_SetConfig+0x2c8>
 80032c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032ca:	d81b      	bhi.n	8003304 <UART_SetConfig+0x2d0>
 80032cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d0:	d00c      	beq.n	80032ec <UART_SetConfig+0x2b8>
 80032d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d6:	d815      	bhi.n	8003304 <UART_SetConfig+0x2d0>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <UART_SetConfig+0x2b0>
 80032dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e0:	d008      	beq.n	80032f4 <UART_SetConfig+0x2c0>
 80032e2:	e00f      	b.n	8003304 <UART_SetConfig+0x2d0>
 80032e4:	2300      	movs	r3, #0
 80032e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ea:	e022      	b.n	8003332 <UART_SetConfig+0x2fe>
 80032ec:	2302      	movs	r3, #2
 80032ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032f2:	e01e      	b.n	8003332 <UART_SetConfig+0x2fe>
 80032f4:	2304      	movs	r3, #4
 80032f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032fa:	e01a      	b.n	8003332 <UART_SetConfig+0x2fe>
 80032fc:	2308      	movs	r3, #8
 80032fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003302:	e016      	b.n	8003332 <UART_SetConfig+0x2fe>
 8003304:	2310      	movs	r3, #16
 8003306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800330a:	e012      	b.n	8003332 <UART_SetConfig+0x2fe>
 800330c:	cfff69f3 	.word	0xcfff69f3
 8003310:	40008000 	.word	0x40008000
 8003314:	40013800 	.word	0x40013800
 8003318:	40021000 	.word	0x40021000
 800331c:	40004400 	.word	0x40004400
 8003320:	40004800 	.word	0x40004800
 8003324:	40004c00 	.word	0x40004c00
 8003328:	40005000 	.word	0x40005000
 800332c:	2310      	movs	r3, #16
 800332e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4aae      	ldr	r2, [pc, #696]	; (80035f0 <UART_SetConfig+0x5bc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	f040 8097 	bne.w	800346c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800333e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003342:	2b08      	cmp	r3, #8
 8003344:	d823      	bhi.n	800338e <UART_SetConfig+0x35a>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <UART_SetConfig+0x318>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	08003371 	.word	0x08003371
 8003350:	0800338f 	.word	0x0800338f
 8003354:	08003379 	.word	0x08003379
 8003358:	0800338f 	.word	0x0800338f
 800335c:	0800337f 	.word	0x0800337f
 8003360:	0800338f 	.word	0x0800338f
 8003364:	0800338f 	.word	0x0800338f
 8003368:	0800338f 	.word	0x0800338f
 800336c:	08003387 	.word	0x08003387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003370:	f7fe ffc0 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 8003374:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003376:	e010      	b.n	800339a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003378:	4b9e      	ldr	r3, [pc, #632]	; (80035f4 <UART_SetConfig+0x5c0>)
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337e:	f7fe ff21 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8003382:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003384:	e009      	b.n	800339a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800338c:	e005      	b.n	800339a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003398:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8130 	beq.w	8003602 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	4a94      	ldr	r2, [pc, #592]	; (80035f8 <UART_SetConfig+0x5c4>)
 80033a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033ac:	461a      	mov	r2, r3
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d305      	bcc.n	80033d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d903      	bls.n	80033da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033d8:	e113      	b.n	8003602 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	2200      	movs	r2, #0
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	60fa      	str	r2, [r7, #12]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	4a84      	ldr	r2, [pc, #528]	; (80035f8 <UART_SetConfig+0x5c4>)
 80033e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2200      	movs	r2, #0
 80033f0:	603b      	str	r3, [r7, #0]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033fc:	f7fc fefe 	bl	80001fc <__aeabi_uldivmod>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	020b      	lsls	r3, r1, #8
 8003412:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003416:	0202      	lsls	r2, r0, #8
 8003418:	6979      	ldr	r1, [r7, #20]
 800341a:	6849      	ldr	r1, [r1, #4]
 800341c:	0849      	lsrs	r1, r1, #1
 800341e:	2000      	movs	r0, #0
 8003420:	460c      	mov	r4, r1
 8003422:	4605      	mov	r5, r0
 8003424:	eb12 0804 	adds.w	r8, r2, r4
 8003428:	eb43 0905 	adc.w	r9, r3, r5
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	469a      	mov	sl, r3
 8003434:	4693      	mov	fp, r2
 8003436:	4652      	mov	r2, sl
 8003438:	465b      	mov	r3, fp
 800343a:	4640      	mov	r0, r8
 800343c:	4649      	mov	r1, r9
 800343e:	f7fc fedd 	bl	80001fc <__aeabi_uldivmod>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4613      	mov	r3, r2
 8003448:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003450:	d308      	bcc.n	8003464 <UART_SetConfig+0x430>
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003458:	d204      	bcs.n	8003464 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6a3a      	ldr	r2, [r7, #32]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	e0ce      	b.n	8003602 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800346a:	e0ca      	b.n	8003602 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003474:	d166      	bne.n	8003544 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003476:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800347a:	2b08      	cmp	r3, #8
 800347c:	d827      	bhi.n	80034ce <UART_SetConfig+0x49a>
 800347e:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <UART_SetConfig+0x450>)
 8003480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003484:	080034a9 	.word	0x080034a9
 8003488:	080034b1 	.word	0x080034b1
 800348c:	080034b9 	.word	0x080034b9
 8003490:	080034cf 	.word	0x080034cf
 8003494:	080034bf 	.word	0x080034bf
 8003498:	080034cf 	.word	0x080034cf
 800349c:	080034cf 	.word	0x080034cf
 80034a0:	080034cf 	.word	0x080034cf
 80034a4:	080034c7 	.word	0x080034c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a8:	f7fe ff24 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 80034ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034ae:	e014      	b.n	80034da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b0:	f7fe ff36 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 80034b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034b6:	e010      	b.n	80034da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b8:	4b4e      	ldr	r3, [pc, #312]	; (80035f4 <UART_SetConfig+0x5c0>)
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034bc:	e00d      	b.n	80034da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034be:	f7fe fe81 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 80034c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034c4:	e009      	b.n	80034da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034cc:	e005      	b.n	80034da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8090 	beq.w	8003602 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	4a44      	ldr	r2, [pc, #272]	; (80035f8 <UART_SetConfig+0x5c4>)
 80034e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ec:	461a      	mov	r2, r3
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80034f4:	005a      	lsls	r2, r3, #1
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	441a      	add	r2, r3
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	2b0f      	cmp	r3, #15
 800350c:	d916      	bls.n	800353c <UART_SetConfig+0x508>
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003514:	d212      	bcs.n	800353c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	b29b      	uxth	r3, r3
 800351a:	f023 030f 	bic.w	r3, r3, #15
 800351e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	b29b      	uxth	r3, r3
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	b29a      	uxth	r2, r3
 800352c:	8bfb      	ldrh	r3, [r7, #30]
 800352e:	4313      	orrs	r3, r2
 8003530:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	8bfa      	ldrh	r2, [r7, #30]
 8003538:	60da      	str	r2, [r3, #12]
 800353a:	e062      	b.n	8003602 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003542:	e05e      	b.n	8003602 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003544:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003548:	2b08      	cmp	r3, #8
 800354a:	d828      	bhi.n	800359e <UART_SetConfig+0x56a>
 800354c:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <UART_SetConfig+0x520>)
 800354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003552:	bf00      	nop
 8003554:	08003579 	.word	0x08003579
 8003558:	08003581 	.word	0x08003581
 800355c:	08003589 	.word	0x08003589
 8003560:	0800359f 	.word	0x0800359f
 8003564:	0800358f 	.word	0x0800358f
 8003568:	0800359f 	.word	0x0800359f
 800356c:	0800359f 	.word	0x0800359f
 8003570:	0800359f 	.word	0x0800359f
 8003574:	08003597 	.word	0x08003597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003578:	f7fe febc 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 800357c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800357e:	e014      	b.n	80035aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003580:	f7fe fece 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 8003584:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003586:	e010      	b.n	80035aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <UART_SetConfig+0x5c0>)
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800358c:	e00d      	b.n	80035aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800358e:	f7fe fe19 	bl	80021c4 <HAL_RCC_GetSysClockFreq>
 8003592:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003594:	e009      	b.n	80035aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800359c:	e005      	b.n	80035aa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80035a8:	bf00      	nop
    }

    if (pclk != 0U)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d028      	beq.n	8003602 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	4a10      	ldr	r2, [pc, #64]	; (80035f8 <UART_SetConfig+0x5c4>)
 80035b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035ba:	461a      	mov	r2, r3
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	fbb3 f2f2 	udiv	r2, r3, r2
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	441a      	add	r2, r3
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	2b0f      	cmp	r3, #15
 80035d8:	d910      	bls.n	80035fc <UART_SetConfig+0x5c8>
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e0:	d20c      	bcs.n	80035fc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60da      	str	r2, [r3, #12]
 80035ec:	e009      	b.n	8003602 <UART_SetConfig+0x5ce>
 80035ee:	bf00      	nop
 80035f0:	40008000 	.word	0x40008000
 80035f4:	00f42400 	.word	0x00f42400
 80035f8:	08004274 	.word	0x08004274
      }
      else
      {
        ret = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2201      	movs	r2, #1
 8003606:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2201      	movs	r2, #1
 800360e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2200      	movs	r2, #0
 8003616:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2200      	movs	r2, #0
 800361c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800361e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003622:	4618      	mov	r0, r3
 8003624:	3730      	adds	r7, #48	; 0x30
 8003626:	46bd      	mov	sp, r7
 8003628:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800362c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01a      	beq.n	8003742 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800372a:	d10a      	bne.n	8003742 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
  }
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b098      	sub	sp, #96	; 0x60
 8003774:	af02      	add	r7, sp, #8
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003780:	f7fd fa6e 	bl	8000c60 <HAL_GetTick>
 8003784:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b08      	cmp	r3, #8
 8003792:	d12f      	bne.n	80037f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800379c:	2200      	movs	r2, #0
 800379e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f88e 	bl	80038c4 <UART_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d022      	beq.n	80037f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c2:	653b      	str	r3, [r7, #80]	; 0x50
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037cc:	647b      	str	r3, [r7, #68]	; 0x44
 80037ce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e6      	bne.n	80037ae <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e063      	b.n	80038bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d149      	bne.n	8003896 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003802:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380a:	2200      	movs	r2, #0
 800380c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f857 	bl	80038c4 <UART_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d03c      	beq.n	8003896 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	623b      	str	r3, [r7, #32]
   return(result);
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
 800383c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e6      	bne.n	800381c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3308      	adds	r3, #8
 8003854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	60fb      	str	r3, [r7, #12]
   return(result);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f023 0301 	bic.w	r3, r3, #1
 8003864:	64bb      	str	r3, [r7, #72]	; 0x48
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3308      	adds	r3, #8
 800386c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800386e:	61fa      	str	r2, [r7, #28]
 8003870:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	69b9      	ldr	r1, [r7, #24]
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	617b      	str	r3, [r7, #20]
   return(result);
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e5      	bne.n	800384e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e012      	b.n	80038bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3758      	adds	r7, #88	; 0x58
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	4613      	mov	r3, r2
 80038d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d4:	e049      	b.n	800396a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d045      	beq.n	800396a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038de:	f7fd f9bf 	bl	8000c60 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e048      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	d031      	beq.n	800396a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b08      	cmp	r3, #8
 8003912:	d110      	bne.n	8003936 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2208      	movs	r2, #8
 800391a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f838 	bl	8003992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2208      	movs	r2, #8
 8003926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e029      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003944:	d111      	bne.n	800396a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800394e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f81e 	bl	8003992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e00f      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4013      	ands	r3, r2
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	429a      	cmp	r2, r3
 8003978:	bf0c      	ite	eq
 800397a:	2301      	moveq	r3, #1
 800397c:	2300      	movne	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	429a      	cmp	r2, r3
 8003986:	d0a6      	beq.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003992:	b480      	push	{r7}
 8003994:	b095      	sub	sp, #84	; 0x54
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b8:	643b      	str	r3, [r7, #64]	; 0x40
 80039ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e6      	bne.n	800399a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	e853 3f00 	ldrex	r3, [r3]
 80039da:	61fb      	str	r3, [r7, #28]
   return(result);
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3308      	adds	r3, #8
 80039ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f8:	e841 2300 	strex	r3, r2, [r1]
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e3      	bne.n	80039cc <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d118      	bne.n	8003a3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f023 0310 	bic.w	r3, r3, #16
 8003a20:	647b      	str	r3, [r7, #68]	; 0x44
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2e:	6979      	ldr	r1, [r7, #20]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	613b      	str	r3, [r7, #16]
   return(result);
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1e6      	bne.n	8003a0c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003a52:	bf00      	nop
 8003a54:	3754      	adds	r7, #84	; 0x54
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b085      	sub	sp, #20
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e027      	b.n	8003ac4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2224      	movs	r2, #36	; 0x24
 8003a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003aa2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e02d      	b.n	8003b44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2224      	movs	r2, #36	; 0x24
 8003af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f84f 	bl	8003bc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e02d      	b.n	8003bc0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2224      	movs	r2, #36	; 0x24
 8003b70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f811 	bl	8003bc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d108      	bne.n	8003bea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003be8:	e031      	b.n	8003c4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bea:	2308      	movs	r3, #8
 8003bec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003bee:	2308      	movs	r3, #8
 8003bf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	0e5b      	lsrs	r3, r3, #25
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	0f5b      	lsrs	r3, r3, #29
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c12:	7bbb      	ldrb	r3, [r7, #14]
 8003c14:	7b3a      	ldrb	r2, [r7, #12]
 8003c16:	4911      	ldr	r1, [pc, #68]	; (8003c5c <UARTEx_SetNbDataToProcess+0x94>)
 8003c18:	5c8a      	ldrb	r2, [r1, r2]
 8003c1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c1e:	7b3a      	ldrb	r2, [r7, #12]
 8003c20:	490f      	ldr	r1, [pc, #60]	; (8003c60 <UARTEx_SetNbDataToProcess+0x98>)
 8003c22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c24:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	7b7a      	ldrb	r2, [r7, #13]
 8003c34:	4909      	ldr	r1, [pc, #36]	; (8003c5c <UARTEx_SetNbDataToProcess+0x94>)
 8003c36:	5c8a      	ldrb	r2, [r1, r2]
 8003c38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c3c:	7b7a      	ldrb	r2, [r7, #13]
 8003c3e:	4908      	ldr	r1, [pc, #32]	; (8003c60 <UARTEx_SetNbDataToProcess+0x98>)
 8003c40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c42:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	0800428c 	.word	0x0800428c
 8003c60:	08004294 	.word	0x08004294

08003c64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c64:	b084      	sub	sp, #16
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	f107 001c 	add.w	r0, r7, #28
 8003c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fa66 	bl	8004154 <USB_CoreReset>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
 8003c9e:	e005      	b.n	8003cac <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cb8:	b004      	add	sp, #16
 8003cba:	4770      	bx	lr

08003cbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f023 0201 	bic.w	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b084      	sub	sp, #16
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d115      	bne.n	8003d2c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	f7fc ffb3 	bl	8000c78 <HAL_Delay>
      ms++;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3301      	adds	r3, #1
 8003d16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fa0d 	bl	8004138 <USB_GetMode>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d01e      	beq.n	8003d62 <USB_SetCurrentMode+0x84>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b31      	cmp	r3, #49	; 0x31
 8003d28:	d9f0      	bls.n	8003d0c <USB_SetCurrentMode+0x2e>
 8003d2a:	e01a      	b.n	8003d62 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d115      	bne.n	8003d5e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d3e:	2001      	movs	r0, #1
 8003d40:	f7fc ff9a 	bl	8000c78 <HAL_Delay>
      ms++;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3301      	adds	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f9f4 	bl	8004138 <USB_GetMode>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <USB_SetCurrentMode+0x84>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2b31      	cmp	r3, #49	; 0x31
 8003d5a:	d9f0      	bls.n	8003d3e <USB_SetCurrentMode+0x60>
 8003d5c:	e001      	b.n	8003d62 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e005      	b.n	8003d6e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b32      	cmp	r3, #50	; 0x32
 8003d66:	d101      	bne.n	8003d6c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d78:	b084      	sub	sp, #16
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b086      	sub	sp, #24
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d92:	2300      	movs	r3, #0
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	e009      	b.n	8003dac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	3340      	adds	r3, #64	; 0x40
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	2200      	movs	r2, #0
 8003da4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	3301      	adds	r3, #1
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	2b0e      	cmp	r3, #14
 8003db0:	d9f2      	bls.n	8003d98 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d11c      	bne.n	8003df2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dc6:	f043 0302 	orr.w	r3, r3, #2
 8003dca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	e005      	b.n	8003dfe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e04:	461a      	mov	r2, r3
 8003e06:	2300      	movs	r3, #0
 8003e08:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e0a:	2103      	movs	r1, #3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f959 	bl	80040c4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e12:	2110      	movs	r1, #16
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f8f1 	bl	8003ffc <USB_FlushTxFifo>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f91d 	bl	8004064 <USB_FlushRxFifo>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e46:	461a      	mov	r2, r3
 8003e48:	2300      	movs	r3, #0
 8003e4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e52:	461a      	mov	r2, r3
 8003e54:	2300      	movs	r3, #0
 8003e56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	e043      	b.n	8003ee6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e74:	d118      	bne.n	8003ea8 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	e013      	b.n	8003eba <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	e008      	b.n	8003eba <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2300      	movs	r3, #0
 8003eca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ede:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d3b7      	bcc.n	8003e5e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	e043      	b.n	8003f7c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f0a:	d118      	bne.n	8003f3e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	e013      	b.n	8003f50 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f34:	461a      	mov	r2, r3
 8003f36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	e008      	b.n	8003f50 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	2300      	movs	r3, #0
 8003f60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d3b7      	bcc.n	8003ef4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003fa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f043 0210 	orr.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <USB_DevInit+0x280>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	f043 0208 	orr.w	r2, r3, #8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d107      	bne.n	8003fe6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fde:	f043 0304 	orr.w	r3, r3, #4
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ff2:	b004      	add	sp, #16
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	803c3800 	.word	0x803c3800

08003ffc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3301      	adds	r3, #1
 800400e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4a13      	ldr	r2, [pc, #76]	; (8004060 <USB_FlushTxFifo+0x64>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d901      	bls.n	800401c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e01b      	b.n	8004054 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	daf2      	bge.n	800400a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	019b      	lsls	r3, r3, #6
 800402c:	f043 0220 	orr.w	r2, r3, #32
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a08      	ldr	r2, [pc, #32]	; (8004060 <USB_FlushTxFifo+0x64>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e006      	b.n	8004054 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b20      	cmp	r3, #32
 8004050:	d0f0      	beq.n	8004034 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	00030d40 	.word	0x00030d40

08004064 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3301      	adds	r3, #1
 8004074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a11      	ldr	r2, [pc, #68]	; (80040c0 <USB_FlushRxFifo+0x5c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e018      	b.n	80040b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	daf2      	bge.n	8004070 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2210      	movs	r2, #16
 8004092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3301      	adds	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <USB_FlushRxFifo+0x5c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e006      	b.n	80040b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b10      	cmp	r3, #16
 80040b0:	d0f0      	beq.n	8004094 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	00030d40 	.word	0x00030d40

080040c4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	68f9      	ldr	r1, [r7, #12]
 80040e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040e4:	4313      	orrs	r3, r2
 80040e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004110:	f023 0303 	bic.w	r3, r3, #3
 8004114:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004124:	f043 0302 	orr.w	r3, r3, #2
 8004128:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f003 0301 	and.w	r3, r3, #1
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3301      	adds	r3, #1
 8004164:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <USB_CoreReset+0x64>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e01b      	b.n	80041aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	2b00      	cmp	r3, #0
 8004178:	daf2      	bge.n	8004160 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f043 0201 	orr.w	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3301      	adds	r3, #1
 800418e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a09      	ldr	r2, [pc, #36]	; (80041b8 <USB_CoreReset+0x64>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d901      	bls.n	800419c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e006      	b.n	80041aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d0f0      	beq.n	800418a <USB_CoreReset+0x36>

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	00030d40 	.word	0x00030d40

080041bc <memset>:
 80041bc:	4402      	add	r2, r0
 80041be:	4603      	mov	r3, r0
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d100      	bne.n	80041c6 <memset+0xa>
 80041c4:	4770      	bx	lr
 80041c6:	f803 1b01 	strb.w	r1, [r3], #1
 80041ca:	e7f9      	b.n	80041c0 <memset+0x4>

080041cc <__libc_init_array>:
 80041cc:	b570      	push	{r4, r5, r6, lr}
 80041ce:	4d0d      	ldr	r5, [pc, #52]	; (8004204 <__libc_init_array+0x38>)
 80041d0:	4c0d      	ldr	r4, [pc, #52]	; (8004208 <__libc_init_array+0x3c>)
 80041d2:	1b64      	subs	r4, r4, r5
 80041d4:	10a4      	asrs	r4, r4, #2
 80041d6:	2600      	movs	r6, #0
 80041d8:	42a6      	cmp	r6, r4
 80041da:	d109      	bne.n	80041f0 <__libc_init_array+0x24>
 80041dc:	4d0b      	ldr	r5, [pc, #44]	; (800420c <__libc_init_array+0x40>)
 80041de:	4c0c      	ldr	r4, [pc, #48]	; (8004210 <__libc_init_array+0x44>)
 80041e0:	f000 f818 	bl	8004214 <_init>
 80041e4:	1b64      	subs	r4, r4, r5
 80041e6:	10a4      	asrs	r4, r4, #2
 80041e8:	2600      	movs	r6, #0
 80041ea:	42a6      	cmp	r6, r4
 80041ec:	d105      	bne.n	80041fa <__libc_init_array+0x2e>
 80041ee:	bd70      	pop	{r4, r5, r6, pc}
 80041f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f4:	4798      	blx	r3
 80041f6:	3601      	adds	r6, #1
 80041f8:	e7ee      	b.n	80041d8 <__libc_init_array+0xc>
 80041fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80041fe:	4798      	blx	r3
 8004200:	3601      	adds	r6, #1
 8004202:	e7f2      	b.n	80041ea <__libc_init_array+0x1e>
 8004204:	080042a4 	.word	0x080042a4
 8004208:	080042a4 	.word	0x080042a4
 800420c:	080042a4 	.word	0x080042a4
 8004210:	080042a8 	.word	0x080042a8

08004214 <_init>:
 8004214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004216:	bf00      	nop
 8004218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421a:	bc08      	pop	{r3}
 800421c:	469e      	mov	lr, r3
 800421e:	4770      	bx	lr

08004220 <_fini>:
 8004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004222:	bf00      	nop
 8004224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004226:	bc08      	pop	{r3}
 8004228:	469e      	mov	lr, r3
 800422a:	4770      	bx	lr
